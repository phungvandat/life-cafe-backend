// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sagas

import (
	"sync"

	"github.com/jinzhu/gorm"
)

var (
	lockSagasServiceMockCommitAllTransaction   sync.RWMutex
	lockSagasServiceMockCommitTransaction      sync.RWMutex
	lockSagasServiceMockNewTransaction         sync.RWMutex
	lockSagasServiceMockRollbackAllTransaction sync.RWMutex
	lockSagasServiceMockRollbackTransaction    sync.RWMutex
)

// Ensure, that SagasServiceMock does implement SagasService.
// If this is not the case, regenerate this file with moq.
var _ SagasService = &SagasServiceMock{}

// SagasServiceMock is a mock implementation of SagasService.
//
//     func TestSomethingThatUsesSagasService(t *testing.T) {
//
//         // make and configure a mocked SagasService
//         mockedSagasService := &SagasServiceMock{
//             CommitAllTransactionFunc: func() error {
// 	               panic("mock out the CommitAllTransaction method")
//             },
//             CommitTransactionFunc: func(in1 string) error {
// 	               panic("mock out the CommitTransaction method")
//             },
//             NewTransactionFunc: func(in1 string, in2 *gorm.DB)  {
// 	               panic("mock out the NewTransaction method")
//             },
//             RollbackAllTransactionFunc: func() error {
// 	               panic("mock out the RollbackAllTransaction method")
//             },
//             RollbackTransactionFunc: func(in1 string) error {
// 	               panic("mock out the RollbackTransaction method")
//             },
//         }
//
//         // use mockedSagasService in code that requires SagasService
//         // and then make assertions.
//
//     }
type SagasServiceMock struct {
	// CommitAllTransactionFunc mocks the CommitAllTransaction method.
	CommitAllTransactionFunc func() error

	// CommitTransactionFunc mocks the CommitTransaction method.
	CommitTransactionFunc func(in1 string) error

	// NewTransactionFunc mocks the NewTransaction method.
	NewTransactionFunc func(in1 string, in2 *gorm.DB)

	// RollbackAllTransactionFunc mocks the RollbackAllTransaction method.
	RollbackAllTransactionFunc func() error

	// RollbackTransactionFunc mocks the RollbackTransaction method.
	RollbackTransactionFunc func(in1 string) error

	// calls tracks calls to the methods.
	calls struct {
		// CommitAllTransaction holds details about calls to the CommitAllTransaction method.
		CommitAllTransaction []struct {
		}
		// CommitTransaction holds details about calls to the CommitTransaction method.
		CommitTransaction []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// NewTransaction holds details about calls to the NewTransaction method.
		NewTransaction []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 *gorm.DB
		}
		// RollbackAllTransaction holds details about calls to the RollbackAllTransaction method.
		RollbackAllTransaction []struct {
		}
		// RollbackTransaction holds details about calls to the RollbackTransaction method.
		RollbackTransaction []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
}

// CommitAllTransaction calls CommitAllTransactionFunc.
func (mock *SagasServiceMock) CommitAllTransaction() error {
	if mock.CommitAllTransactionFunc == nil {
		panic("SagasServiceMock.CommitAllTransactionFunc: method is nil but SagasService.CommitAllTransaction was just called")
	}
	callInfo := struct {
	}{}
	lockSagasServiceMockCommitAllTransaction.Lock()
	mock.calls.CommitAllTransaction = append(mock.calls.CommitAllTransaction, callInfo)
	lockSagasServiceMockCommitAllTransaction.Unlock()
	return mock.CommitAllTransactionFunc()
}

// CommitAllTransactionCalls gets all the calls that were made to CommitAllTransaction.
// Check the length with:
//     len(mockedSagasService.CommitAllTransactionCalls())
func (mock *SagasServiceMock) CommitAllTransactionCalls() []struct {
} {
	var calls []struct {
	}
	lockSagasServiceMockCommitAllTransaction.RLock()
	calls = mock.calls.CommitAllTransaction
	lockSagasServiceMockCommitAllTransaction.RUnlock()
	return calls
}

// CommitTransaction calls CommitTransactionFunc.
func (mock *SagasServiceMock) CommitTransaction(in1 string) error {
	if mock.CommitTransactionFunc == nil {
		panic("SagasServiceMock.CommitTransactionFunc: method is nil but SagasService.CommitTransaction was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockSagasServiceMockCommitTransaction.Lock()
	mock.calls.CommitTransaction = append(mock.calls.CommitTransaction, callInfo)
	lockSagasServiceMockCommitTransaction.Unlock()
	return mock.CommitTransactionFunc(in1)
}

// CommitTransactionCalls gets all the calls that were made to CommitTransaction.
// Check the length with:
//     len(mockedSagasService.CommitTransactionCalls())
func (mock *SagasServiceMock) CommitTransactionCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockSagasServiceMockCommitTransaction.RLock()
	calls = mock.calls.CommitTransaction
	lockSagasServiceMockCommitTransaction.RUnlock()
	return calls
}

// NewTransaction calls NewTransactionFunc.
func (mock *SagasServiceMock) NewTransaction(in1 string, in2 *gorm.DB) {
	if mock.NewTransactionFunc == nil {
		panic("SagasServiceMock.NewTransactionFunc: method is nil but SagasService.NewTransaction was just called")
	}
	callInfo := struct {
		In1 string
		In2 *gorm.DB
	}{
		In1: in1,
		In2: in2,
	}
	lockSagasServiceMockNewTransaction.Lock()
	mock.calls.NewTransaction = append(mock.calls.NewTransaction, callInfo)
	lockSagasServiceMockNewTransaction.Unlock()
	mock.NewTransactionFunc(in1, in2)
}

// NewTransactionCalls gets all the calls that were made to NewTransaction.
// Check the length with:
//     len(mockedSagasService.NewTransactionCalls())
func (mock *SagasServiceMock) NewTransactionCalls() []struct {
	In1 string
	In2 *gorm.DB
} {
	var calls []struct {
		In1 string
		In2 *gorm.DB
	}
	lockSagasServiceMockNewTransaction.RLock()
	calls = mock.calls.NewTransaction
	lockSagasServiceMockNewTransaction.RUnlock()
	return calls
}

// RollbackAllTransaction calls RollbackAllTransactionFunc.
func (mock *SagasServiceMock) RollbackAllTransaction() error {
	if mock.RollbackAllTransactionFunc == nil {
		panic("SagasServiceMock.RollbackAllTransactionFunc: method is nil but SagasService.RollbackAllTransaction was just called")
	}
	callInfo := struct {
	}{}
	lockSagasServiceMockRollbackAllTransaction.Lock()
	mock.calls.RollbackAllTransaction = append(mock.calls.RollbackAllTransaction, callInfo)
	lockSagasServiceMockRollbackAllTransaction.Unlock()
	return mock.RollbackAllTransactionFunc()
}

// RollbackAllTransactionCalls gets all the calls that were made to RollbackAllTransaction.
// Check the length with:
//     len(mockedSagasService.RollbackAllTransactionCalls())
func (mock *SagasServiceMock) RollbackAllTransactionCalls() []struct {
} {
	var calls []struct {
	}
	lockSagasServiceMockRollbackAllTransaction.RLock()
	calls = mock.calls.RollbackAllTransaction
	lockSagasServiceMockRollbackAllTransaction.RUnlock()
	return calls
}

// RollbackTransaction calls RollbackTransactionFunc.
func (mock *SagasServiceMock) RollbackTransaction(in1 string) error {
	if mock.RollbackTransactionFunc == nil {
		panic("SagasServiceMock.RollbackTransactionFunc: method is nil but SagasService.RollbackTransaction was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockSagasServiceMockRollbackTransaction.Lock()
	mock.calls.RollbackTransaction = append(mock.calls.RollbackTransaction, callInfo)
	lockSagasServiceMockRollbackTransaction.Unlock()
	return mock.RollbackTransactionFunc(in1)
}

// RollbackTransactionCalls gets all the calls that were made to RollbackTransaction.
// Check the length with:
//     len(mockedSagasService.RollbackTransactionCalls())
func (mock *SagasServiceMock) RollbackTransactionCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockSagasServiceMockRollbackTransaction.RLock()
	calls = mock.calls.RollbackTransaction
	lockSagasServiceMockRollbackTransaction.RUnlock()
	return calls
}
