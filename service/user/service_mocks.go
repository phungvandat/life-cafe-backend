// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"sync"

	"github.com/phungvandat/life-cafe-backend/model/request"
	"github.com/phungvandat/life-cafe-backend/model/response"
)

var (
	lockServiceMockCommitTransaction   sync.RWMutex
	lockServiceMockCreate              sync.RWMutex
	lockServiceMockCreateMaster        sync.RWMutex
	lockServiceMockGetUser             sync.RWMutex
	lockServiceMockGetUsers            sync.RWMutex
	lockServiceMockLogIn               sync.RWMutex
	lockServiceMockRollbackTransaction sync.RWMutex
	lockServiceMockUpdateUser          sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CommitTransactionFunc: func(in1 context.Context, in2 string) error {
// 	               panic("mock out the CommitTransaction method")
//             },
//             CreateFunc: func(in1 context.Context, in2 request.CreateUserRequest) (*response.CreateUserResponse, error) {
// 	               panic("mock out the Create method")
//             },
//             CreateMasterFunc: func(in1 context.Context) error {
// 	               panic("mock out the CreateMaster method")
//             },
//             GetUserFunc: func(in1 context.Context, in2 request.GetUserRequest) (*response.GetUserResponse, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUsersFunc: func(in1 context.Context, in2 request.GetUsersRequest) (*response.GetUsersResponse, error) {
// 	               panic("mock out the GetUsers method")
//             },
//             LogInFunc: func(in1 context.Context, in2 request.UserLogInRequest) (*response.UserLogInResponse, error) {
// 	               panic("mock out the LogIn method")
//             },
//             RollbackTransactionFunc: func(in1 context.Context, in2 string) error {
// 	               panic("mock out the RollbackTransaction method")
//             },
//             UpdateUserFunc: func(in1 context.Context, in2 request.UpdateUserRequest) (*response.UpdateUserResponse, error) {
// 	               panic("mock out the UpdateUser method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CommitTransactionFunc mocks the CommitTransaction method.
	CommitTransactionFunc func(in1 context.Context, in2 string) error

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 context.Context, in2 request.CreateUserRequest) (*response.CreateUserResponse, error)

	// CreateMasterFunc mocks the CreateMaster method.
	CreateMasterFunc func(in1 context.Context) error

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(in1 context.Context, in2 request.GetUserRequest) (*response.GetUserResponse, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(in1 context.Context, in2 request.GetUsersRequest) (*response.GetUsersResponse, error)

	// LogInFunc mocks the LogIn method.
	LogInFunc func(in1 context.Context, in2 request.UserLogInRequest) (*response.UserLogInResponse, error)

	// RollbackTransactionFunc mocks the RollbackTransaction method.
	RollbackTransactionFunc func(in1 context.Context, in2 string) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(in1 context.Context, in2 request.UpdateUserRequest) (*response.UpdateUserResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CommitTransaction holds details about calls to the CommitTransaction method.
		CommitTransaction []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 request.CreateUserRequest
		}
		// CreateMaster holds details about calls to the CreateMaster method.
		CreateMaster []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 request.GetUserRequest
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 request.GetUsersRequest
		}
		// LogIn holds details about calls to the LogIn method.
		LogIn []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 request.UserLogInRequest
		}
		// RollbackTransaction holds details about calls to the RollbackTransaction method.
		RollbackTransaction []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 string
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 request.UpdateUserRequest
		}
	}
}

// CommitTransaction calls CommitTransactionFunc.
func (mock *ServiceMock) CommitTransaction(in1 context.Context, in2 string) error {
	if mock.CommitTransactionFunc == nil {
		panic("ServiceMock.CommitTransactionFunc: method is nil but Service.CommitTransaction was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockCommitTransaction.Lock()
	mock.calls.CommitTransaction = append(mock.calls.CommitTransaction, callInfo)
	lockServiceMockCommitTransaction.Unlock()
	return mock.CommitTransactionFunc(in1, in2)
}

// CommitTransactionCalls gets all the calls that were made to CommitTransaction.
// Check the length with:
//     len(mockedService.CommitTransactionCalls())
func (mock *ServiceMock) CommitTransactionCalls() []struct {
	In1 context.Context
	In2 string
} {
	var calls []struct {
		In1 context.Context
		In2 string
	}
	lockServiceMockCommitTransaction.RLock()
	calls = mock.calls.CommitTransaction
	lockServiceMockCommitTransaction.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(in1 context.Context, in2 request.CreateUserRequest) (*response.CreateUserResponse, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 request.CreateUserRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(in1, in2)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	In1 context.Context
	In2 request.CreateUserRequest
} {
	var calls []struct {
		In1 context.Context
		In2 request.CreateUserRequest
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// CreateMaster calls CreateMasterFunc.
func (mock *ServiceMock) CreateMaster(in1 context.Context) error {
	if mock.CreateMasterFunc == nil {
		panic("ServiceMock.CreateMasterFunc: method is nil but Service.CreateMaster was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockServiceMockCreateMaster.Lock()
	mock.calls.CreateMaster = append(mock.calls.CreateMaster, callInfo)
	lockServiceMockCreateMaster.Unlock()
	return mock.CreateMasterFunc(in1)
}

// CreateMasterCalls gets all the calls that were made to CreateMaster.
// Check the length with:
//     len(mockedService.CreateMasterCalls())
func (mock *ServiceMock) CreateMasterCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockServiceMockCreateMaster.RLock()
	calls = mock.calls.CreateMaster
	lockServiceMockCreateMaster.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *ServiceMock) GetUser(in1 context.Context, in2 request.GetUserRequest) (*response.GetUserResponse, error) {
	if mock.GetUserFunc == nil {
		panic("ServiceMock.GetUserFunc: method is nil but Service.GetUser was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 request.GetUserRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	lockServiceMockGetUser.Unlock()
	return mock.GetUserFunc(in1, in2)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedService.GetUserCalls())
func (mock *ServiceMock) GetUserCalls() []struct {
	In1 context.Context
	In2 request.GetUserRequest
} {
	var calls []struct {
		In1 context.Context
		In2 request.GetUserRequest
	}
	lockServiceMockGetUser.RLock()
	calls = mock.calls.GetUser
	lockServiceMockGetUser.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *ServiceMock) GetUsers(in1 context.Context, in2 request.GetUsersRequest) (*response.GetUsersResponse, error) {
	if mock.GetUsersFunc == nil {
		panic("ServiceMock.GetUsersFunc: method is nil but Service.GetUsers was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 request.GetUsersRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	lockServiceMockGetUsers.Unlock()
	return mock.GetUsersFunc(in1, in2)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//     len(mockedService.GetUsersCalls())
func (mock *ServiceMock) GetUsersCalls() []struct {
	In1 context.Context
	In2 request.GetUsersRequest
} {
	var calls []struct {
		In1 context.Context
		In2 request.GetUsersRequest
	}
	lockServiceMockGetUsers.RLock()
	calls = mock.calls.GetUsers
	lockServiceMockGetUsers.RUnlock()
	return calls
}

// LogIn calls LogInFunc.
func (mock *ServiceMock) LogIn(in1 context.Context, in2 request.UserLogInRequest) (*response.UserLogInResponse, error) {
	if mock.LogInFunc == nil {
		panic("ServiceMock.LogInFunc: method is nil but Service.LogIn was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 request.UserLogInRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockLogIn.Lock()
	mock.calls.LogIn = append(mock.calls.LogIn, callInfo)
	lockServiceMockLogIn.Unlock()
	return mock.LogInFunc(in1, in2)
}

// LogInCalls gets all the calls that were made to LogIn.
// Check the length with:
//     len(mockedService.LogInCalls())
func (mock *ServiceMock) LogInCalls() []struct {
	In1 context.Context
	In2 request.UserLogInRequest
} {
	var calls []struct {
		In1 context.Context
		In2 request.UserLogInRequest
	}
	lockServiceMockLogIn.RLock()
	calls = mock.calls.LogIn
	lockServiceMockLogIn.RUnlock()
	return calls
}

// RollbackTransaction calls RollbackTransactionFunc.
func (mock *ServiceMock) RollbackTransaction(in1 context.Context, in2 string) error {
	if mock.RollbackTransactionFunc == nil {
		panic("ServiceMock.RollbackTransactionFunc: method is nil but Service.RollbackTransaction was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockRollbackTransaction.Lock()
	mock.calls.RollbackTransaction = append(mock.calls.RollbackTransaction, callInfo)
	lockServiceMockRollbackTransaction.Unlock()
	return mock.RollbackTransactionFunc(in1, in2)
}

// RollbackTransactionCalls gets all the calls that were made to RollbackTransaction.
// Check the length with:
//     len(mockedService.RollbackTransactionCalls())
func (mock *ServiceMock) RollbackTransactionCalls() []struct {
	In1 context.Context
	In2 string
} {
	var calls []struct {
		In1 context.Context
		In2 string
	}
	lockServiceMockRollbackTransaction.RLock()
	calls = mock.calls.RollbackTransaction
	lockServiceMockRollbackTransaction.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *ServiceMock) UpdateUser(in1 context.Context, in2 request.UpdateUserRequest) (*response.UpdateUserResponse, error) {
	if mock.UpdateUserFunc == nil {
		panic("ServiceMock.UpdateUserFunc: method is nil but Service.UpdateUser was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 request.UpdateUserRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockServiceMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockServiceMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(in1, in2)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedService.UpdateUserCalls())
func (mock *ServiceMock) UpdateUserCalls() []struct {
	In1 context.Context
	In2 request.UpdateUserRequest
} {
	var calls []struct {
		In1 context.Context
		In2 request.UpdateUserRequest
	}
	lockServiceMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockServiceMockUpdateUser.RUnlock()
	return calls
}
